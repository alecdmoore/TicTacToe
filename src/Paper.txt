5.) 
Topics taught in the class that were used for this project were, but not limited too, GUI programming, design patterns(MVC and Strategy), and actionListener/changeListeners. 


Topics that were studied upon for the project include layout manager implementation, scaling images, creating custom icons with specific properties.


One topic that we used in this project that we were taught in class were listeners and events. We used ActionListeners for JButtons for when a button is clicked, in order to detect input from the user. We also used a ChangeListener to communicate between the model and view. Another topic taught in class that we used in this project was the MVC pattern. We created a model class, a view class, and a controller class. The model stored ChangeListeners, one of which belonged to the view. When a button is clicked, the controller updates the model. Then, the model notifies all stored listeners about the change. The view then gets the needed data from the model to visually update the board.        
We also had to implement the Strategy pattern that we learned in class. We created an interface that concrete classes could implement. It had methods that the view class could call to change the style of the board. Another thing we learned in class that we used were basic GUI elements such as JFrame, JButton, and JLabels.
We did not have very much experience with layout managers prior to this project. In order to choose a layout for this project, we needed to research all the layouts. Originally we thought that the Gridbaglayout would be the best option. However, when we began to implement our strategy design we realized that it would be much simpler to use a combination of layouts instead. We used GridLayout, FlowLayout, and BorderLayout together to create a visually appealing board layout.
Another feature we had to implement into our project was the usage of different custom icons.  While we had a basic idea of what to do, we still had to research how to implement it.  We ended up loading the custom icon images using the ImageIcon class, and creating a getScaledImageIcon() method.  Using this method, we were able to return two different images as the X and O icons. We also had to find out how to make JButtons have transparent backgrounds, and how to have an image behind the JButtons. We ended up using a JLabel for the overall board background, and found the methods in the documentation that would allow the JButton to have a transparent background.